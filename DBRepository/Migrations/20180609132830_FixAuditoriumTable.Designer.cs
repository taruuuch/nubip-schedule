// <auto-generated />
using System;
using DBRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DBRepository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180609132830_FixAuditoriumTable")]
    partial class FixAuditoriumTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rc1-32029")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Model.Academic", b =>
                {
                    b.Property<int>("AcademicId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("AcademicId");

                    b.ToTable("Academics");
                });

            modelBuilder.Entity("Model.Auditorium", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuditoriumTypeId");

                    b.Property<int>("BuildingId");

                    b.Property<int>("Number");

                    b.Property<int>("SeatseCount");

                    b.HasKey("AuditoriumId");

                    b.HasIndex("AuditoriumTypeId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("Model.AuditoriumType", b =>
                {
                    b.Property<int>("AuditoriumTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Computer");

                    b.Property<string>("Title");

                    b.HasKey("AuditoriumTypeId");

                    b.ToTable("AuditoriumTypes");
                });

            modelBuilder.Entity("Model.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Title");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Model.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartamentId");

                    b.Property<int>("LabaratorCount");

                    b.Property<int>("LectionCount");

                    b.Property<int>("Semester");

                    b.Property<int?>("SpecialityId");

                    b.Property<int>("SubjectId");

                    b.HasKey("CurriculumId");

                    b.HasIndex("DepartamentId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Model.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("DegreeId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Model.Departament", b =>
                {
                    b.Property<int>("DepartamentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dean");

                    b.Property<string>("Email");

                    b.Property<int>("FacultyId");

                    b.Property<string>("Title");

                    b.HasKey("DepartamentId");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("Model.EducationForm", b =>
                {
                    b.Property<int>("EducationFormId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("EducationFormId");

                    b.ToTable("EducationForms");
                });

            modelBuilder.Entity("Model.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("EducationLevelId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("Model.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("BuildingId");

                    b.Property<string>("Dean");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("ShortName");

                    b.Property<string>("Site");

                    b.Property<string>("Title");

                    b.HasKey("FacultyId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Facultys");
                });

            modelBuilder.Entity("Model.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EducationFormId");

                    b.Property<int>("EducationLevelId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("SpecialityId");

                    b.Property<int>("StudentCount");

                    b.Property<int>("TeacherId");

                    b.Property<string>("Title");

                    b.HasKey("GroupId");

                    b.HasIndex("EducationFormId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Model.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuditoriumId");

                    b.Property<int>("CurriculumId");

                    b.Property<string>("Day");

                    b.Property<int>("GroupId");

                    b.Property<int>("SubGroup");

                    b.Property<int>("TeacherId");

                    b.Property<int>("TimeId");

                    b.Property<int>("Week");

                    b.HasKey("LessonId");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TimeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Model.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("From");

                    b.Property<int>("LessonId");

                    b.Property<DateTime>("RequestTime");

                    b.Property<bool>("Status");

                    b.Property<int>("TimeId");

                    b.Property<DateTime>("To");

                    b.HasKey("RequestId");

                    b.HasIndex("LessonId");

                    b.HasIndex("TimeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Model.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FacultyId");

                    b.Property<string>("Title");

                    b.HasKey("SpecialityId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Specialitys");
                });

            modelBuilder.Entity("Model.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SubjectTypeId");

                    b.Property<string>("Title");

                    b.HasKey("SubjectId");

                    b.HasIndex("SubjectTypeId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Model.SubjectType", b =>
                {
                    b.Property<int>("SubjectTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("SubjectTypeId");

                    b.ToTable("SubjectTypes");
                });

            modelBuilder.Entity("Model.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicId");

                    b.Property<int>("DegreeId");

                    b.Property<int>("DepartamentId");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("Middlename");

                    b.Property<string>("Name");

                    b.Property<string>("Site");

                    b.HasKey("TeacherId");

                    b.HasIndex("AcademicId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartamentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Model.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<TimeSpan>("End");

                    b.Property<int>("Number");

                    b.Property<TimeSpan>("Start");

                    b.HasKey("TimeId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("Model.Auditorium", b =>
                {
                    b.HasOne("Model.AuditoriumType", "AuditoriumType")
                        .WithMany("Auditoriums")
                        .HasForeignKey("AuditoriumTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Building", "Building")
                        .WithMany("Auditoriums")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Curriculum", b =>
                {
                    b.HasOne("Model.Departament", "Departament")
                        .WithMany("Curriculums")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Speciality", "Speciality")
                        .WithMany("Curriculums")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Model.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Faculty", b =>
                {
                    b.HasOne("Model.Building", "Building")
                        .WithMany("Faculties")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Group", b =>
                {
                    b.HasOne("Model.EducationForm", "EducationForm")
                        .WithMany("Groups")
                        .HasForeignKey("EducationFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.EducationLevel", "EducationLevel")
                        .WithMany("Groups")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Lesson", b =>
                {
                    b.HasOne("Model.Auditorium", "Auditorium")
                        .WithMany("Lessons")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Curriculum", "Curriculum")
                        .WithMany("Lessons")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Time", "Time")
                        .WithMany("Lessons")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Request", b =>
                {
                    b.HasOne("Model.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Time", "Time")
                        .WithMany("Requests")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Speciality", b =>
                {
                    b.HasOne("Model.Faculty", "Faculty")
                        .WithMany("Specialities")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Subject", b =>
                {
                    b.HasOne("Model.SubjectType", "SubjectType")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Teacher", b =>
                {
                    b.HasOne("Model.Academic", "Academic")
                        .WithMany("Teachers")
                        .HasForeignKey("AcademicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Degree", "Degree")
                        .WithMany("Teachers")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Departament", "Departament")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
